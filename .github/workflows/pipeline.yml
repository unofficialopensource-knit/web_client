name: "Pipeline"

on:
  pull_request:
    branches:
      - main
      - release
  push:
    branches:
      - release

jobs:
  test:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: "ubuntu-20.04"
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "14.16.1"

      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-pip-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: "Install test dependencies"
        run: npm install --save-dev

      - name: "Run eslint"
        run: npm run lint

      - name: "Run prettier"
        run: npm run format

  build:
    if: ${{ github.event_name == 'pull_request' }}
    needs:
      - test
    runs-on: "ubuntu-20.04"
    steps:
      - uses: actions/checkout@v2

      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v1

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v1

      - name: "Cache Docker layers"
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: "Login to docker hub registry"
        uses: "docker/login-action@v1"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Docker meta info for tag managements"
        id: meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: onlinejudge95/web_client
          tags: type=sha

      - name: "Build and push the Docker image"
        id: docker_build
        uses: "docker/build-push-action@v2"
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          platforms: linux/amd64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: "Image digest"
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: "Move cache"
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/release' }}
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2

      - name: "Deploy the web dyno"
        uses: "akhileshns/heroku-deploy@v3.12.12"
        with:
          docker_heroku_process_type: web
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: snakeeyes-web
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          justlogin: true

      - name: "Login to heroku registry"
        run: heroku container:login

      - name: "Build and push to heroku registry"
        run: heroku container:push web --app snakeeyes-web

      - name: "Releases the container"
        run: heroku container:release web --app snakeeyes-web
